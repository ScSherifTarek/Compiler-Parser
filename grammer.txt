program->decl_list
decl_list->decl decl_list`
decl_list`->decl decl_list`|e
decl->var_decl|fun_decl
var_decl->type_spec IDENT var_decl`
var_decl`->;|[];
type_spec->VOID |BOOL|INT|FLOAT
fun_decl->type_spec IDENT(params)compound_stmt
params->param_list |VOID
param_list->param
param_list->param param_list`
param_list`->,param param_list|e
param->type_spec param`
param`->[]|e
stmt_lsit->stmt_lsit`
stmt_lsit`->stmt stmt_lsit`|e
stmt->expr_stmt|compound_stmt|if_stmt|while_stmt|return_stmt|break_stmt
expr_stmt->expr ;|;
while_stmt->while(expr)stmt
compound_stmt->{local_decls stmt_lsit}
local_decls->local_decls`
local_decls`->local_decl local_decls`|e
local_decl->type_spec IDENT local_decl`
local_decl`->;|[];
if_stmt->if(expr) stmt if_stmt`
if_stmt`->else stmt|e
return_stmt->return return_stmt`
return_stmt`->;|expr|e
break_stmt->break;
expr -> ID  expr_id_' expr_more | BOOL_LIT expr_more | INT_LIT expr_more  | FLOAT_LIT expr_more|  NEW type_spec [ expr ]  expr_more | ! expr expr_more | - expr expr_more | + expr expr_more | (expr) expr_more
expr_id_'-> = expr | [expr] expr_id_'_'| . size  |  (args)  | e
expr_id_'_'-> = expr | e
expr_more->  OR expr | EQ expr  | NE expr | LE expr  | < expr | GE expr | > expr | AND expr | + expr | - expr | * expr | / expr |  % expr  | e
arg_list ->    expr  arg_list_'
arg_list_' ->  , expr    arg_list_'   | e
args -> arg_list | e